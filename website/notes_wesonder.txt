August 23, 2024

1. We can enter the websites in the first Google Search result for each sub, but we can also create a stnadard function for each of the most common Sites, for example, for Yelp we can create a separate function that understand the structure of a conventional yelp site, and perhaps iterate through more redirecting links within it.


August 25, 2024


2. We need to build a function that iterates thorugh each of the subcontractors needed for the bid in question, the way we are going to do it is by first, checking the subcontractor name, then search for the name in the existent DIR data base verbatim.

	a. Find the index where each of the neede subs are found in the DIR.
	b. Retrieve the email only based on the index.
	c. Tabulate the needed subcontractor, and their respective email address only (2 columns only).
	d. Figure out how to acquire the emails that were not retreived by trial and error.

3. Develop a way to search for parts of the name, i.e. separating the name by words. 

	a. Calculate the possible search combinations for each subcontractor.
	b. Number of words = N, desired word arrangement = R.
	c. Search the possible combinations in the DIR Database.
	d. Retrieve and tabulate along with the rest of searches.
	e. There seems to be a few scenarous, when the subcontractor name has less characters than the result in
	the DIR data base, 2) when the sub name has more characters than the DIR data base, and 3) when the
	subcontractor has different arrangement of wording than the DIR data base.
	f. Find another way to get the total permutations with always including the first word. Perhaps there 
	is no need to do this, we can instead search for all possible permutations that do not include
	certain words only.
	g. Perhaps create a list of unwanted repeated words that shall not be included in the databse search
	such as "CO", "CORPORATION", "INC", "INCORPORATED", "LLC", "COMPANY", "MANUFACTURE", "LTD", "MFG",
	"ASSOCIATES", "ASSOC", "CORP".


August 26, 2024


4. Connect the Google search function.

	a. Connect the result of the DIR Data base with the Google Search function.
	b. Make sure it also works when the results of the DIR Data base function is an empty list.


August 27, 2024


5. Fix bugs, google search, and database discrepancies. 

	a. Fix the google issue in which the navigatin bar in a website is not perceived.
	b. We learned that the <nav> and <footer> are html elements that usually are the ones that
	contain the email or personnel information, the about page, or any other reference to people.


August 28, 2024


6. Run a test

	a. Create a similar function to the <footer>.
	b. Make it beautiful.
	c. Connect the two functions (Google Search) and DIR Database.
	d. Make sure that if the company was not found in the first permutation session, and neither
	was found in the second permutation session, the company's name shall be returned as its original
	name within the Not Found List #2, not as a permutation assigned name.
		i. Count the possible (not including undesired words) permutations of the names that were
		not found in the Not Found 1.
		ii. If the same amount of permutations are found again in the Not Found 2, then we look for
		the name in google, if at least one was found (i.e. the amount of possible permutations does
		not has the same lenght as before from the count) then it means that something was found and
		there is no need to look for it on google.
		iii. Lastly, if the without the first word is not found, then we still need to look for it as
		not including the first word will lead to misunderstanding since it is likely that the rest
		of the words are a standard.
		iv. Do not complicate yourself, just see if the ones that have the first original name
		are the same as the ones that were outputed in Not Found 2.
	e. Redoing the same name function:
		i. Pinpoint for the amount of permutations containing the first word
		ii. Improvise and follow your intuition. 


August 29, 2024


	a. Run a test.
	b. Fix any bugs that the test produced.


August 30, 2024


	a. Fixed some bugs in the google search results.
	b. Was able to extract "mailto:" elements accurately.


August 31, 2024

	a. Make the results into a pretty DataFrame.
		i. I.e. making it into a resulting excel file.
		ii. Why excel? Because we want to apply a macro to send email invitations to the newly
		extracted set of emails we looked for.
	b. Make sure that there are no errors for empty search results.
	c. Separate the Google Search instances.
		i. Separate each email per gogle search (i.e. only output the emails corresponding to the
		respective google search; without mentioning that we need the name of the company searched
		in google along with their emails). Something like x = [EntityName,[Email1,Email2,Emailn]]. We
		will use the x[0] as the first column of the dataframe, and combine x[1] with .join().
		ii. Once separated, create a DataFrame and append both to it. Keep in mind that the dataframe
		needs to have the name of the company and the emails as specified above.
		iii. Combine that data frame with the DIR Results data frame
	d. Fix the repetition of entities.
	e. Optimize the code.
		i. Only include permutations that include the first word.


September 1, 2024


	a. Refine the permutation search
		i. Only search for permutations that include the first word of the company
		ii. Disregard the first word if the word is of length 1, and if the word is a conventional 
		starting word such as "THE". Perhaps "disregard" isn't the proper verb, but "rephrase". 
		If one of the scenarios above is true, utilize the first two words of the company instead
		of the very first one.
		iii. If the first word of the company is a 1 character set e.g. "A B C Electrical", we can
		treat the "A B C" as a single word and search; i.e. "ABC". To do so, we need to include the
		actual names from the Not Found 1 List in order to reference them using indexes.
	b. Make sure that the resulting DIR Data frame with emails does not include awarding bodies
	c. Remove the data frame results that are not in the specified counties to shorten the resulting
	dataframe.
	d. In order to decrease the total amount of resulting rows in the dataframe into a more realistic
	display of entity information, let's only attach the entity's information that was found from a single
	permutation instance.
		i. Basically, we only want to look for an entity until one if its possible permutations
		has been found; if it is found, then we stop the search.
		ii. The problem I see with this one is that, for example, if we have a list of two values,
		"Value1" and "Value2", the function might find the "Value1", however, there will be a chance
		that "Value2" is closer to the actual value we are looking for.
	e. I have a better idea for (d). Perhaps we can remove any entities from the dataframe that are not
	within the desired counties.
		i. First of all though, I want to know why not all non-found entities are not being searched 
		for in the web?
		ii. Now that it has been fixed, remove the entities that are not within the desired boundaries
		in order to increase accuracy of resulting dataframe because remember that this data base 

 
September 3, 2024

	
	a. Allocate the county to every city from the DIR Database
	b. Reduce the dataframe outcome using the newly appended column from the DIR Database by removing
	the entities that might've derived from a different county.
	c. Something's up with the data base. Let's be a little bit more awake later.
	

September 4, 2024


	a. We've finished the county allocation in the DIR Database, now we need to use it to decrease the 
	number of rows displayed.
	b. Refine further by removing the ones that are in a city we don't want to.
		ii. The way we are going to do this is that we are going to see if the city is in the county
		of our desire based on the county's list index. 
	c. We can also remove the searches that include multiple (more than 1) unicharacters.


September 5, 2024


	a. We fixed some repetition, now we just look for the same words without the undesiderd words, which
	sure causes a higher amount of google searches, but a minimal amount of redundant permutations.
	b. We also needed to iterate through the bid_subcontractors.csv accordingly using sets of 100 due to
	lack of performance of the CPU, and to be honest, due to lack of optimized functions within my code...
	Hey, what can I say, we were once a begineer in everything at once right?
	c. Lastly we created a function to concatenate the given files containing each 100 run.


September 6, 2024


	a. We did our first test; we sent 31100 emails today... Amazing job mon ami.


September 24, 2024


	a. Ladies and Gentleman, now comes the different part...
	b. Let's start building the WeSonder website:
		i. Start with the home page, and remember, keep it neat, captivating, and preeminently, mesmerizing to the intendend audience...
	c. Let's do a case study about the design of multiple prominent websites. Some of the common features are:
		i. Navbar (sometimes even two).
			1. What can we include here?
				a. About us (basically my website).
		ii. Do not request cookies alert (at least for now, let it grow first).
		iii. Provide a 8-10 sec gif of what the website does (e.g. mapbox cool design)
		iv. Provide the pros of using WeSonder (e.g. a matrix/display of a 3x3 good beneficial points like zeemaps).
		v. Be straight forward, like facebook (you want it, yes or no?), but do not be so static (like mapme), play between the two.
		vi. Do not include too much text, and the one that you include, make it concise and succinct.
		vii. Make it futuristic, perhaps well-developed by a young person.
	d. There has to be four main features for the users to be able to realize that is not only a map web app, it is a service.
		i. Pin subcontractors (in order to go back), thereby creating an account in the process.
		ii. Classify by License Type, County, City, Zip Code, Name, License Number.
			1. And this is not a checkbox, but a text box: the user has to see the map changing in
			real time.
		iii.DIR Projects locations.
			1. Based on the DIR Extraction, this will be like a "Past Records".
			2. Potentially, we will also include federal projects here.
		iv. The last feature is going to be the Pinpointing Feature: This feature allows the user to click a part of the map, and:
			1. Display the subcontractors nearby the clicing point on a default 100 miles range.
			2. Display the subcontractors nearby the clicking point in the map based on parameters from (d.ii).
		v. Awarding bodies show. 
			1. We can also include the bidding sites extracted from potential_bidders_extraction.py, something like: "Awarding body X bids on: Planetbids,
			Bidnet, or/and Opengov" and provide the respective bids.
			2. This is an amazing idea. We are going to iterate through each awarding body, and search and extract their BiddingSites, and 
			display the information as a feature on WeSonder.
		vi. Email the entity
	e. (d.iv) is the breakthrough not only in the construction industry, but also the web design community.




September 25, 2024


	a. We want to make the background color of the website some type of gradient white, the logo will most likely be yellow.
	b. Logo has to be the following color: #0f3fb8
	c. The home page has to have 4 crucials parts:
		i. Crust: the first thing the user see once clicking on the website, i.e. the navbar with our logo and the name of the
		website on the left, and three options on the right (About, Our Goal, Features), as well as a California map with a handful of
		locations pinpointed by map markers, and one of them standing out displaying the message which is the information about
		the sub in question, on the right, and on the left a few sentences captivating the audience, something like "Looking for
		a specific Contractor? Where is your project located? Pinpointed on the map and find the nearest future business partner!".
		ii. Lithosphere: A longer introduction of how the site works, and what is capable of, with a supporting 10-second gif/video on the right
		side of this text.
		iii. Mantle: Everything regarding pricing and setting up an account.
		iv. Core: Footer with my name embedded in it so they know who created this masterpiece.
	d. Eventually each of the sides will contain motion, but now let's build the frame and the clothes of the Marionette.


September 26, 2024


	a. Focus on the four sections of the website mentioned above.
	b. CRUST
		i. The transparent background has to match and be situated adjacently with the nav bar.
		ii. They have to share backgrounds and perhaps the box. They are an individual section together.
		iii. On the left side, a mesmerizing marketing-influnced text goes.
		iv. On the right side, a good-looking picture of the map of California.
	c. LITHOSPHERE:
		i. Not transparent anymore, perhaps a little bit darker. 
		ii. On the left side, the gif/video of the functionality of the site.
		iii. On the right side, a couple of concise and succinct paragraphs explaining the capabilities of the functionality.
		iv. Make sure it cover the entire screen of the user, the section above nor the section below has to be seen. Unless further
		scrolling by the user.
		

September 27, 2024


	a. Cluster and heatmaps will be an interesting choice to do as well.
	b. Attaboy, website set up completed.
	c. Explain what the word "WeSonder" means.


September 28, 2024


	a. Finish the mock ups for the home page and the other pages.


September 29, 2024


	a. The color of the page will be black tones.
	b. The logo is a minimalistic human, with a formal attire, a harthat, and a Map Marker next to it.
	c. We really need to create a specialized email for this website.
	d. Add the slideshow functionality in the about for multiple pictures of yourself.
	e. For the Objective section, we will have a simple page as well, with only the section of the navbar, the footer, and the explanation of each
	objective. There will be a total of three objectives, each of them named after a plural noun, with an explanation attached to each.
	The JS involved here will be three boxess, that contain a picture, and a wrapped text, as soon as the user hovers over the box, the box
	will increase in size, and display the entirety of the text (which was not displayed before, only a part of it). The same for the other
	boxes, that will be in the same line.
		i. Connections: Explain the goal of connecting people and increasing the relations in the industry.
		ii. Opportunities: Explain how this yields opportunities for business of all sizes.
		iii. Communication: Explain how communication plays a key role in this business and how it helps to have a healthy
		friendly industry.	 


September 30, 2024


	1. Describing the six features.
	2. For the Contact Section, do not let the user proceed until he finishes with everything, including the message.


October 1, 2024

	1. A beautiful aspect about 
	2. They were right abut illustrations.


October 2, 2024


	1. Finished the Objective Section
	2. For the About Section, we want to do the following: We want to have three grid structures vertically, each of them contaitning two panels. The sections are
	the following: 
		i. Grid 1: An explanation of who I am (existing already on website), the left panel will have the text, and the right panel will include a 
		automatic slideshow with two pictures of myself standing and coding.
		i. Grid 2: An explanation of my experience in the industry, what have I done, and how have I mingled mathematics, programming, and other expertises
		in this beautiful industry, with also a slideshow (two pictures of me with construction attire and Estimating office), but now on the left panel, and the 
		explanation on the right.
		i. Grid 3: An explanation of the goal of the website, with the explanation on the left, and an illustration of the map on the right, and maybe
		an extra one as well.
	3. For the Contact Section, we just need to redirect them to my email, and add some illustrations as well.
		

October 3, 2024


	1. We are going to leave the Design portion aside for now, and focus on the mapping, we want to endeavor into something new, and perhaps learn more about
	such beautiful functionality in Javascript. There has to be a balance between Aesthetics/Subjective work and Functional/Objective work. In this case,
	the former refers to the Design Portion, whereas the latter refers to the Mapping Portion.
	2. That being said, there is going to be three different maps:
		I. Contractors
		II. Awarding Bodies
		III. Projects


October 4, 2024


	1. We will not do anything today most likely, but I was thinking: we need some type of verification method for accounts, such as email since a hacker can create
	a web crawler and flood our server with accounts if they do not require a verification email.
	2. There are 4 Data Bases that contain addresses, and we need their Geolocations:
		I. CSLB (Ongoing as of October 3rd, 2024; Finished as October 5)
		II. DIR Projects (Ongoing as of October 4th, 2024, Finished as October 6)
		III. DIR Entities (Ongoing as of October 4th, 2024)
		IV. Federal Projects (NA)


October 6, 2024


	1. Currently, we are refining the Geolocation Search for our databases as some of the addresses' geolocations were not acquired in the first text. That being said, we need to refine the
	methodology of geolocation search, there are currently three problems for the addresses lacking a geolocation:
		I. PO Boxes: Our plan to solve this is to build a webcrawler for the FIND USPS Locations Website and enter the original Zip Code of the address, the results might be multiple
		addresses, or just one at random choice. Of course, there will be a disclaimer in the WeSonder mapping about these types of addresses.
			A. Apparently, Google Maps API is quite effective in finding these addresses, but we will still display the Post Offices Addresses just in case.
		II. Spelling: Some of the addresses include verbosity addresses, e.g. instead of "St", they use "Street", or "Court" for "Ct", among others. We just need to create a list of
		frequent address abbreviations and transcribe them to the proper string that acquires the geolocation.
			A. Google Maps API is quite effective here, regardless of the wording, thereby we will be using it as a substitude of this method.
		III. Out of state: Remove them, we are just focused in California for now.
			A. Google Maps API also takes care of this, just out of words...
	2. Another envisaged issue is the frequent update of CSLB Entities, but the solution for that will be to include the new entities to the current CSLB Database based on comparison with
	the previous one, and apply the search of Geolocation Version 1, and then the Version 2. Or both simultaneously.
	3. Let's structure our approach:
		I. COMPLETED: Set up the Missing Address Functionality for the CSLB Entities (missing_addresses.py)
			A. Let it loose
		II. CANCELLED: Before starting the CSLB Refinement, build a webcrawler for the zip codes of Post Offices
			A. Let it loose
			B. We decided to dismiss this functionality. Why? What's the benefit of it? If the user sees the potential addresses, which will be multiple, it will only generate
			confusion and perhaps reduce trustworhiness, we can just display a message saying the liability of such address with PO Box attributes.
		III. COMPLETED: Do a refinement function for the DIR Entities as well.
			A. Let it loose
		IV. COMPLETED: Fix all the DIR Projects with Google Maps API as well.


October 7, 2024


	1. COMPLETED: The goal for today is to load the csv file into javascript. 
		I. We were able to load it from Google Cloud Storage.
		II. We have the columns for the X and Y Coordinates.
	2. COMPLETED: Let's map the first 100 markers
	3. COMPLETED: Find a way to map all of the markers, without too much memory or cloud usage. We found a way to do it via clustering, which looks quite amazing.
	4. COMPLETED: Refine the data, and start with the functionalities.
		I. COMPLETED: Remove the addresses that are not from California, and make sure that the address is indeed from outside the state.
	5. COMPLETED: We can refine the clustering in that, once the user comes to a certain zoom point, all cluster disappears, and the marks just show up. Make this an user choice, but
	only to a certain zoom distance, aesthetically speaking.


October 8, 2024


	1. Now that we have the aesthetics of the map completed, it's time to implement the variety of functionalities to the map, i.e. the different datapoints that can be showed. 
	2. (COMPLETED) Awarding Bodies: the display of all awarding bodies in California.
	3. (COMPLETED) CSLB Contractors: the display of all active subcontractors in california. Keep in mind that this cannot be showed simultaneously with other datasets. This will be different
	than the others as there will also be a classifying display for these entities, i.e. there will be a variety of classifications to based the display on, such as:
		I. (COMPLETED) Classification (License Type)
			A. (COMPLETED) There are problems with the scrolling of the display.
			B. (COMPLETED) Also, the D licences are not apparent. There is something wrong with them.
			C. (COMPLETED) I know it is tiring, but you need to fix the thing about other addresses. 
		II. (COMPLETED) County
	5. (REJECTED) The 100 mile click: A creative functionality that allows the user to click anypoint in the map and any entity in the 100 mile radius will appear, whether a project,
	a contractor, or an awarding body. Anything within the 100 mile radius will pop up.


October 9, 2024


	1. (COMPLETED) Today we were just fixing and updating geolocations all day, tiring and monotonous, but at the end of the day, enhanced accuracy.
	2. (COMPLETED) Added some aesthetic features to the map as well, such as markers count and the selection of dataset while display.


October 10, 2024


	2. (COMPLETED) But also, the allocation of bidding sites to each awarding body.
	3. (COMPLETED) In order to improve performance, enforce a rule that only up to 3 Licenses can be checked at once, and limiting the others. Up to three. I found that if you click the
	checkboxes too fast, the site freezes, however, if you click a checkbox and leave 2-3 seconds in between, the site remains stable. Perhaps there can be a function like that.
	

October 11, 2024

	1. (COMPLETED) We are going to substitude the 100 mile functionality with the addition of links to the awarding bodies.
	2. (INCOMPLETE) Lastly, we will do the logo today.
	3. (REJECTED) Do not let people download your dataset.
		I. Come on man, do not be so self-absorbed... Besides, you know that everyone can donwload the cslb data publicly right?...
	4. We decided to remove the DIR Projects display, not only due to a tad lazyness, but also because there are around 500,000 projects, which will slow down the computer connected to
	the site's shitty hotspot. Not only that, but there is not "objective" benefit to get out of the projects, just mere aesthetics and "functionality boast" (showing we can). If it was
	the prior DIR website where the entities involved were displayed, then it would be useful, but now the only item being displayed is the project itself, not even the amount, so what's
	the use of such datum? Just to increase aesthetic value (while slowing down website performance for the front end user?) and show that we are capable of it? So, if we reject it, then
	what are the 4 main features? Good question. There are four features, it's just a matter of marketing and embellishing the fact that the four features are those available. The real
	question is; how good is your rhetoric?... ;)
		I. Contractors/Manufacturers (splitted into two):
			A. License Type
			B. Counties
		II. Awarding Bodies
		III. Awarding Bodies Websites


October 17, 2024


	1. After a long hiatus, I am back. We will focus on website aeasthetics now. For starters, we will develop the section where we show the product being used using gifs.
	2. We decided that having the four functionalities will work, showing two grids, with two functionalities on each.
	3. We've also decided that we are going to use the psychological promotion strategy of Price Anchoring, hierarchically the features are going to be:
		I. General Contractors display
		II. Awarding Bodies
		III. Searching for Subcontractor using specific parameters (a searchbar that allows you to search using specific parameters: license number, name, phone number, website, etc.)
		IV. Contractor Participation Locations (only if existent in the planetbids extraction)
		V. Project Locations (Base it on counties so it doesn't overweight the memory of the website)
		VI. DVBE, DBE, SB, Feature


October 20, 2024

	1. (REJETED) We are going to finish the extraction of emails program today, and tomorrow continue with the development of wesonder.
		I. (REJECTED) Find a way to iterate through 5 instances of bid tables, and then close the browser
		II. (REJECTED) Also, iterate through the links of planebids using two sessions at a time, one for odd numbers and one for even numbers
	2. New approach, find all rowattributes from each planetbids and store them for the second phase of planetbids_emails.py
		I. Find a way to store the sites that did not work along with their awarding body name
		II. Make the function continous, i.e. automated
		III. Store every single new url with their respective rowattribute id in different csv files within a different folder


October 22, 2024


	1. Develop the functionality above, we need multiple features
	2. For the website aesthetics, make it interactive by making the logo stand out bigger at first, and as the user scrolls down, the logo adjust to the proper size of the nav bar.
	3. Enter the corporation/sole owner option as well.
	4. Clean computer first.


October 23, 2024

	1. Focus on categorizing based on Corporation/Sole Owner (include LLCs) on the search





































